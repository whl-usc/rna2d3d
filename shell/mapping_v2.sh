#!/bin/bash
#SBATCH --ntasks=1
#SBATCH --time=12:00:00
#SBATCH --cpus-per-task=8
#SBATCH --mem-per-cpu=8G

module load gcc/11.3.0
module load openjdk
module load perl/5.36.0

####################################################################################################
# contact:    wlee9829@gmail.com
# date:       2023_11_21
# script:     mapping_v2.sh
#
# This script standardizes the mapping of pre-processed data from PARIS- and SHARC-based sequencing.
# STAR and various scripts from the CRSSANT pipeline are used. Change paths and variables accordingly.
# mapping_v2.sh includes new functions for converting SAM to BAM, and removing redundant files.
#
# STAR: https://github.com/alexdobin/STAR
# CRSSANT: https://github.com/zhipenglu/CRSSANT/tree/master/scripts
####################################################################################################

####################################################################################################
# Specify the following variables with absolute paths for software, Staridx path, Gtf.
####################################################################################################
# ScriptPath:   path to software (e.g., /bin/)
# StaridxPath:  path to genomic index generated by STAR mapping (e.g., /ref/staridx/starhg38mask14add)
# Gtf:          path to gtf file (e.g., /ref/hg38.gtf)
####################################################################################################
ScriptPath=/pipeline/bin
StaridxPath=/staridx/starhg38mask14add/
Gtf=/pipeline/ref/hg38.gtf
####################################################################################################

####################################################################################################
#  Define the mapping function with preset parameters.
####################################################################################################
function mapping() {
        mkdir $WorkPath
        cd $WorkPath

        ## STAR mapping
        $ScriptPath/STAR-2.7.1a/bin/Linux_x86_64/STAR \
        --runThreadN 8 \
        --runMode alignReads \
        --genomeDir $StaridxPath \
        --readFilesIn $Fastq \
        --outFileNamePrefix $Outprefix'_1_' \
        --genomeLoad NoSharedMemory \
        --outReadsUnmapped Fastx \
        --outFilterMultimapNmax 10 \
        --outFilterScoreMinOverLread 0 \
        --outSAMattributes All \
        --outSAMtype BAM Unsorted SortedByCoordinate \
        --alignIntronMin 1 \
        --scoreGap 0 \
        --scoreGapNoncan 0 \
        --scoreGapGCAG 0 \
        --scoreGapATAC 0 \
        --scoreGenomicLengthLog2scale -1 \
        --chimOutType WithinBAM HardClip \
        --chimSegmentMin 5 \
        --chimJunctionOverhangMin 5 \
        --chimScoreJunctionNonGTAG 0 \
        --chimScoreDropMax 80 \
        --chimNonchimScoreDropMin 20

        ## Get the primary alignments
        samtools view -h $Outprefix'_1_Aligned.sortedByCoord.out.bam' | awk '$1~/^@/ || NF<21' > $Outprefix'_1_nonchimeric_temp.sam'
        samtools view -h $Outprefix'_1_Aligned.sortedByCoord.out.bam' | awk '$1!~/^@/ && NF==21'> $Outprefix'_1_chimeric_temp.sam'
        samtools view -bS -F 0x900 -o $Outprefix'_1_nonchimeric_pri.bam' $Outprefix'_1_nonchimeric_temp.sam'
        samtools view -h $Outprefix'_1_nonchimeric_pri.bam' > $Outprefix'_1_nonchimeric_pri.sam'
        cat $Outprefix'_1_nonchimeric_pri.sam' $Outprefix'_1_chimeric_temp.sam' > $Outprefix'_1_pri.sam'
        rm -f $Outprefix'_1_nonchimeric_temp.sam' $Outprefix'_1_chimeric_temp.sam' $Outprefix'_1_nonchimeric_pri.bam' $Outprefix'_1_nonchimeric_pri.sam'

        ## Divide alignments to different types
        python3 $ScriptPath/crssant/CRSSANT-master/scripts/gaptypes_v2.py $Outprefix'_1_pri.sam' $Outprefix'_1_pri' -1 15 1
        echo "Primary alignments from the first round of mapping were classified to different types."
        echo

        ## Softreverse.py on the backwards chimera files
        python3 $ScriptPath/crssant/CRSSANT-master/scripts/softreverse.py $Outprefix'_1_pricont.sam' $Outprefix'_softrev.fastq'

        $ScriptPath/STAR-2.7.1a/bin/Linux_x86_64/STAR \
        --runThreadN 8 \
        --runMode alignReads \
        --genomeDir $StaridxPath \
        --readFilesIn $Outprefix'_softrev.fastq' \
        --outFileNamePrefix $Outprefix'_2_' \
        --genomeLoad NoSharedMemory \
        --outReadsUnmapped Fastx \
        --outFilterMultimapNmax 10 \
        --outFilterScoreMinOverLread 0 \
        --outSAMattributes All \
        --outSAMtype BAM Unsorted SortedByCoordinate \
        --alignIntronMin 1 \
        --scoreGap 0 \
        --scoreGapNoncan 0 \
        --scoreGapGCAG 0 \
        --scoreGapATAC 0 \
        --scoreGenomicLengthLog2scale -1 \
        --chimOutType WithinBAM HardClip \
        --chimSegmentMin 5 \
        --chimJunctionOverhangMin 5 \
        --chimScoreJunctionNonGTAG 0 \
        --chimScoreDropMax 80 \
        --chimNonchimScoreDropMin 20

        ## Get the primary alignments
        samtools view -h $Outprefix'_2_Aligned.sortedByCoord.out.bam' | awk '$1~/^@/ || NF<21' > $Outprefix'_2_nonchimeric_temp.sam'
        samtools view -h $Outprefix'_2_Aligned.sortedByCoord.out.bam' | awk '$1!~/^@/ && NF==21'> $Outprefix'_2_chimeric_temp.sam'
        samtools view -bS -F 0x900 -o $Outprefix'_2_nonchimeric_pri.bam' $Outprefix'_2_nonchimeric_temp.sam'
        samtools view -h $Outprefix'_2_nonchimeric_pri.bam' > $Outprefix'_2_nonchimeric_pri.sam'
        cat $Outprefix'_2_nonchimeric_pri.sam' $Outprefix'_2_chimeric_temp.sam' > $Outprefix'_2_pri.sam'
        rm -f $Outprefix'_2_nonchimeric_temp.sam' $Outprefix'_2_chimeric_temp.sam' $Outprefix'_2_nonchimeric_pri.bam' $Outprefix'_2_nonchimeric_pri.sam'

        ## Divide alignments to different types
        python3 $ScriptPath/crssant/CRSSANT-master/scripts/gaptypes_v2.py $Outprefix'_2_pri.sam' $Outprefix'_2_pri' -1 15 1

        ## Combine reads from both rounds of mapping
        python3 $ScriptPath/rna2d3d/scripts/merger_sams.py $Outprefix'_1_prigap1.sam' $Outprefix'_2_prigap1.sam' $Outprefix gap1 $Outprefix'_prigap1.tmp'
        python3 $ScriptPath/rna2d3d/scripts/merger_sams.py $Outprefix'_1_prigapm.sam' $Outprefix'_2_prigapm.sam' $Outprefix gapm $Outprefix'_prigapm.tmp'
        python3 $ScriptPath/rna2d3d/scripts/merger_sams.py $Outprefix'_1_prihomo.sam' $Outprefix'_2_prihomo.sam' $Outprefix homo $Outprefix'_prihomo.tmp'
        python3 $ScriptPath/rna2d3d/scripts/merger_sams.py $Outprefix'_1_pritrans.sam' $Outprefix'_2_pritrans.sam' $Outprefix trans $Outprefix'_pritrans.tmp'

        samtools view -H $Outprefix'_1_Aligned.sortedByCoord.out.bam' > header
        cat header $Outprefix'_prigap1.tmp' > $Outprefix'_prigap1.sam' 
        cat header $Outprefix'_prigapm.tmp' > $Outprefix'_prigapm.sam' 
        cat header $Outprefix'_prihomo.tmp' > $Outprefix'_prihomo.sam' 
        cat header $Outprefix'_pritrans.tmp' > $Outprefix'_pritrans.sam' 
        rm -f header *.tmp

        rm *_1_pribad.sam; rm *_1_pricont.sam; rm *_1_prigap1.sam; rm *_1_prigapm.sam; rm *_1_prihomo.sam; rm *_1_pritrans.sam 
        rm *_2_pribad.sam; rm *_2_pricont.sam; rm *_2_prigap1.sam; rm *_2_prigapm.sam; rm *_2_prihomo.sam; rm *_2_pritrans.sam 

        ## Remove splice junction alignments
        python3 $ScriptPath/crssant/CRSSANT-master/scripts/gapfilter.py $Gtf $Outprefix'_prigap1.sam' $Outprefix'_prigap1_filtered.sam' 13 yes
        python3 $ScriptPath/crssant/CRSSANT-master/scripts/gapfilter.py $Gtf $Outprefix'_prigapm.sam' $Outprefix'_prigapm_filtered.sam' 13 yes

        ## Plot the length of gaps (N): gaplendist_mod.py
        cat $Outprefix'_prigap1_filtered.sam' $Outprefix'_prigapm_filtered.sam' > $Outprefix'_prigaps_filtered.sam'
        python3 $ScriptPath/crssant/CRSSANT-master/scripts/gaplendist_mod.py $Outprefix'_prigaps_filtered.sam' $Outprefix'_gaplen.pdf' 100
        rm -f $Outprefix'_prigaps_filtered.sam'
        
        ## Plot size distribution of each segment: seglendist_mod.py
        cat $Outprefix'_prigap1_filtered.sam' $Outprefix'_prigapm_filtered.sam' $Outprefix'_pritrans.sam' > $Outprefix'_prifiltered.sam'
        python3 $ScriptPath/crssant/CRSSANT-master/scripts/seglendist_mod.py $Outprefix'_prifiltered.sam' $Outprefix'_seglen.pdf'
        rm -f $Outprefix'_prifiltered.sam'
        
        ## Plot the length of gaps (N): gaplendist_v2.py
        ## python3 $ScriptPath/crssant/CRSSANT-master/scripts/gaplendist_v2.py $Outprefix'_prigaps_filtered.sam' sam $Outprefix'.list' all
        ## python3 $ScriptPath/crssant/CRSSANT-master/scripts/gaplendist_v2.py $Outprefix'.list' list $Outprefix'_gaplen.pdf' all
        ## rm -f $Outprefix'_prigaps_filtered.sam' $Outprefix'.list'

        ## Plot size distribution of each segment: seglendist_v2.py
        ## python3 $ScriptPath/crssant/CRSSANT-master/scripts/seglendist_v2.py $Outprefix'_prifiltered.sam' sam $Outprefix'_prifiltered.list'
        ## python3 $ScriptPath/crssant/CRSSANT-master/scripts/seglendist_v2.py $Outprefix'_prifiltered.list' list $Outprefix'_seglen.pdf'
        ## rm -f $Outprefix'_prifiltered.sam' $Outprefix'_prifiltered.list'

}

function merge_crssant() {
        # Combine the files for CRSSANT and tag
        python3 $ScriptPath/crssant/CRSSANT-master/scripts/merger_v2.py $Outprefix'_prigap1_filtered.sam' $Outprefix'_pritrans.sam' $Outprefix'_pri_crssant.sam' gap1
}

function batch_convert() {
        echo
        echo "Batch converting files from SAM to BAM"
        # Iterate through each SAM file in the current directory
        for file in *.sam; do
            # Check if the file is a regular file
            if [ -f "$file" ]; then
                # Perform your operation on each file
                echo "Processing file: $file"
                # Extract filename without the .sam extension
                filename=$(basename "$file" .sam)
                # Convert SAM to BAM using samtools
                samtools view -bS -o "$filename.bam" "$file"
            fi
        done
}

function removesam() {
        # Remove the original SAM file
        echo
        echo "Removing these SAM files to save disk space:"
        rm -v *.sam
}

####################################################################################################

####################################################################################################
# Specify the following variables with absolute paths for software, Staridx path, Gtf.
####################################################################################################
# WorkPath:     path for writing output files  (e.g., /data/mapping/test)
# Fastq:        fastq file(s) to map (e.g., /preprocessing/test/x.fastq)
# Outprefix:    prefix for output file names, typically the barcode or sample name "R701" (e.g., test)
####################################################################################################

####################################################################################################

WorkPath=/
Fastq=/
Outprefix=HS-HeLa_DPI-12

mapping; merge_crssant; batch_convert; removesam; gzip $Outprefix'_softrev.fastq'; mkdir map_1 map_2 && mv *_1_* map_1 && mv *_2_* map_2; echo "Mapping, classifying, filtering, and file cleanup completed for: $Outprefix"; echo
