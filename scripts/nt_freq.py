'''
contact:    wlee9829@gmail.com
date:       2022_12_14
python:     python3.8
script:     nt_freq.py
    
This script is used to count the frequency 
of nucleotides from the 3'-end of sequencing
read arms. User defined range and RNA region.
'''

# Import packages
import sys, argparse, os, re, itertools, math, time, random, ast
import numpy as np
import pandas as pd
from datetime import datetime

# Usage instructions
if len(sys.argv) < 8:
    print("Usage:           python site_nt_freq.py sam ref + - rRNA all_reads reads")
    print("sam:             sam file generated by crssant.py")
    print("ref:             reference sequence in '.fa' or '.fasta' format")
    print("-:               nucleotides 'left' of 3'-end of read arm")
    print("+:               nucleotides 'right' of 3'-end of read arm ")
    print("                 Note: 3'-end position = '-1', +/- is relative to -1.")
    print("rRNA:            18S, 28S, 5.8S, all")
    print("all_reads:       'y' or 'n'; use all DG reads?")
    print("read_num:        How many reads to use? If all_reads = 'y', use any integer.")
    print("                 Note: 1 read = 2 arms, resulting in a higher total number.")
    sys.exit()

inputsam = open(sys.argv[1],'r'); outname = os.path.splitext(sys.argv[1])[0]
ref = open(sys.argv[2], 'r')
minus = int(sys.argv[3])
plus = int(sys.argv[4])
RNA_region = str(sys.argv[5])
use_all = str(sys.argv[6])
readcount = int(sys.argv[7])

if plus < 0  or minus < 0:
    print("Choose plus, minus values >= 0."); sys.exit()
if use_all != 'y' and use_all != 'n':
    print("Use all DG reads?"); sys.exit()
if int(readcount) <= 0:
    print("For use_all = 'n', read_num >=0"); sys.exit()

if RNA_region == "18S" or RNA_region == "28S" or RNA_region == "5.8S":
    print("\n*******************" + " Processing reads for the " + RNA_region + " rRNA. *******************\n")
elif RNA_region == "all":
    print("\n*******************" + " Processing file for " + RNA_region + " reads. *******************\n")
else:
    print("Select an rRNA: 18S, 28S, 5.8S, or 'all'\n")
    sys.exit()

####################################################################################################

# Converting sam file to reads.
def mergeCIGAR(CIGAR): 
    # Merge all operations that consume the reference, i.e. MI=X
    # Example: 1S2M3N4M5I6M7S -> 1S2M3N10M7S 
    ops = re.findall('\d+[MNISH=X]', CIGAR) #all that consume query
    newops = [ops[0]]
    for op in ops[1:]: # Concatenate all internal ops that consume query [MIS=X
        if op[-1] not in "I=X":
            if newops[-1][-1]=="M" and op[-1]=="M":
                newops[-1] = str(int(newops[-1][:-1])+int(op[:-1]))+"M"
            else: newops.append(op)
    newCIGAR = ("".join(str(i) for i in newops))
    return newCIGAR

# Turn alignment into segs [(RNAME, STRAND L, R), ...]
def getsegs(line, segs): 
    align = line.split()
    RNAME, POS, CIGAR = align[2], int(align[3]), align[5]
    STRAND = '-' if '{0:012b}'.format(int(align[1]))[-5] == '1' else '+'
    if align[0] not in segs: segs[align[0]] = [] #store all gaps from this CIGAR string, each as a 3-tuple.
    seglens = [int(i[:-1]) for i in re.findall('[0-9]+M', mergeCIGAR(CIGAR))] #seg lengths
    Ns =[i.rstrip('0123456789') for i in mergeCIGAR(CIGAR).split('M')]
    rx = [] #reference consumed: MD=X
    for N in Ns:
        rx.append(sum([int(i[:-1]) for i in re.findall('[0-9]+[ND=X]', N)]))
    for i in range(len(seglens)): #combine ref and segment lengths to make the junctions
        l, r = POS+sum(rx[:i+1])+sum(seglens[:i]), POS+sum(rx[:i+1])+sum(seglens[:i+1])-1
        if (RNAME, int(l), int(r), STRAND) not in segs[align[0]]: segs[align[0]].append((RNAME, int(l), int(r), STRAND))
        segs[align[0]].sort()
    #print(segs[align[0]])
    if len(segs[align[0]]) == 2: return segs[align[0]]

# Splitting rRNAs into regions based on nucleotide number.
def split_region(RNA_region):
    dictcount = len(newDGspan.keys())
    print("Processing " + str(dictcount) + " reads...")    
    DGspan_18s = []; DGspan_58s = []; DGspan_28s = []; DGspan_all = []
    for i in range(0,dictcount):
        region = list(newDGspan.values())[i]; DGspan_all.append(region)
        left_arm = list(region[0]); right_arm = list(region[1])
        left_s = left_arm[1]; right_e = right_arm[2]
        if left_s >= 3654 and right_e <= 5523: DGspan_18s.append(region)
        if left_s >= 6600 and right_e <= 6757: DGspan_58s.append(region)
        if left_s >= 7924 and right_e <= 12994: DGspan_28s.append(region)
        # Set up counter for reads sorted.
        if dictcount >= 10000:
            if (i+1) % 5000 == 0: print("Sorted " + str(i+1) + " reads.")
        elif dictcount <= 10000:
            if (i+1) % 1000 == 0: print("Sorted " + str(i+1) + " reads.")
        elif dictcount < 1000:
            print("Sorted " + str(i) + " reads.")
    if RNA_region == "18S": RNA = DGspan_18s
    if RNA_region == "5.8S": RNA = DGspan_58s
    if RNA_region == "28S": RNA = DGspan_28s
    if RNA_region == "all": RNA = DGspan_all
    return RNA

# Read .txt output for faster processing; no need to sort reads again.
def RNA_text(outname, RNA_region):
    with open(outname+"_"+RNA_region+".txt", 'r') as file:
        RNA = []; file_reads = file.readlines() 
        reads = [val.rstrip() for val in file_reads]
        for i in range(0,len(reads)):
            read = reads[i].split(", ")
            RNA.append(read)
    return RNA

# Define the range of plus, minus values based on input.
def add_sub(plus, minus):
    add = []; sub = []
    for i in range(1, plus+1): add.append(i)
    for i in range(1, minus+1): sub.append(i)    
    return add, sub

# Read sam or txt file for processing reads; split left, right arms.
def split_arm(txt, arm, add_sub):
    plus_arm = []; minus_arm = []
    if txt == "yes":
        for i in range(0,len(RNA)):
            if arm == "left": 
                reads_add = int(RNA[i][2])+add_sub; plus_arm.append(reads_add)
                reads_sub = int(RNA[i][2])-add_sub; minus_arm.append(reads_sub)
            elif arm == "right":
                reads_add = int(RNA[i][6])+add_sub; plus_arm.append(reads_add)
                reads_sub = int(RNA[i][6])-add_sub; minus_arm.append(reads_sub)
    if txt == "no":
        for i in range(0,len(RNA)):
            if arm == "left": 
                reads_add = RNA[i][0][2]+add_sub; plus_arm.append(reads_add)
                reads_sub = RNA[i][0][2]-add_sub; minus_arm.append(reads_sub)
            elif arm == "right": 
                reads_add = RNA[i][1][2]+add_sub; plus_arm.append(reads_add)
                reads_sub = RNA[i][1][2]-add_sub; minus_arm.append(reads_sub)                    
    return plus_arm, minus_arm

# Count the number of nucleotides at plus/minus position relative to 3'-end.
def nt_count(plus_minus, arm_end, side):
    nt_plus = []; nt_minus = []; counts = [] 
    if side == "add":
        for i in range(0,len(RNA)):
            arm_end = plus_arm
            nuc_plus = (arm_end[i])
            if nuc_plus <= len(ref_seq):
                nuc_plus_val = str(ref_seq[nuc_plus-1])
            elif nuc_plus > len(ref_seq):
                nuc_plus_val = "X"          
            nt_plus.append(nuc_plus_val)        
            a = nt_plus.count("A"); g = nt_plus.count("G"); c = nt_plus.count("C"); u = nt_plus.count("U")
            total = int(a) + int(g) + int(c) + int(u)
            count = [plus_minus, a, g, c, u, total]

    if side == "sub":
        for i in range(0,len(RNA)): 
            arm_end = minus_arm
            nuc_minus = (arm_end[i])
            if nuc_minus > 0:
                nuc_minus_val = str(ref_seq[nuc_minus-1])
            elif nuc_minus <= 0:
                nuc_minus_val = "X"
            nt_minus.append(nuc_minus_val)
            a = nt_minus.count("A"); g = nt_minus.count("G"); c = nt_minus.count("C"); u = nt_minus.count("U")
            total = int(a) + int(g) + int(c) + int(u)   
            count = [plus_minus, a, g, c, u, total]
            
    return count

####################################################################################################

# Process the sam file into a dictionary 
print(str(datetime.now())[:-7] + " Collecting alignments into dictionary...")
dgdict = {}; #{sample-dgid: [(RNAME, str(ls), str(le), STRAND),(RNAME, str(rs), str(re), STRAND)] [] []..}
DGspan = {}; DGs=[];  segs={}; newDGspan = {}

# Process the inputsam file lines into individual DGs.
for line in inputsam:
    #build the dgdict: dictionary of all segment terminals
    #format: dgid:[RNAME, STRAND, lstart, lend, rstart rend]
    if line[0]=='@': continue
    align = line.split('\t')
    readID = align[0]
    if readID not in newDGspan: newDGspan[readID] = []
    if getsegs(line,segs):  newDGspan[readID] = getsegs(line,segs)
inputsam.close()

# Convert reference sequence to have U instead of T.
def splitlist(seq):
    return [char for char in seq]

for line in ref:
    if line[0]=='>': continue
    seq = line.strip().replace('T', 'U'); ref_seq = splitlist(seq)
    #print(ref_seq)
ref.close()

# Only reads in the range of (18s, 5.8s, 28s rRNA or "all" reads).
# Write individual DG data to output text file for faster processing when repeating analysis with different number of reads.
print(str(datetime.now())[:-7] + " Checking for .txt file containing region information...")

try:
    RNA = RNA_text(outname, RNA_region); txt = "yes"
except:
    print("No file named " + outname + "_" + RNA_region +".txt, splitting regions instead...")
    RNA = split_region(RNA_region); txt = "no"
    with open(outname+"_"+RNA_region+".txt", 'w') as file:
        for reads in RNA: file.writelines(str(reads)+"\n")
    file.close()

# Use "all" or only defined number of random reads.
if use_all == 'y':
    print(str(datetime.now())[:-7] + " Using " + str(len(RNA)) + " reads...")
elif use_all == 'n':
    try:
        RNA = random.sample(RNA, readcount) # How many reads?
        print(str(datetime.now())[:-7] + " Using " + str(len(RNA)) + " reads...")
    except:
        print(str(datetime.now())[:-7] + " Number of reads exceeds maximum: "+str(len(RNA))+". Use a lower number.\n")
        sys.exit()

# Count the frequency of nucleotide at various positions for both DG arms
print(str(datetime.now())[:-7] + " Counting nucleotide frequency of read arms...\n")
add, sub = add_sub(plus, minus)
count_left = []; count_right = []
# For the left arm.
for i in reversed(range(1,len(add)+1)):
    plus_arm, minus_arm = split_arm(txt, "left", i); count_l = nt_count(i, plus_arm, "add")
    count_left.append(count_l)
for i in range(0,len(sub)):
    plus_arm, minus_arm = split_arm(txt, "left", i); count_l = nt_count(-1*i-1, minus_arm, "sub")
    count_left.append(count_l)

df = pd.DataFrame(count_left,columns=['NT', 'A', 'G', 'C', 'U', 'Total'])
df['A_fraction'] = df['A']/df['Total']; a_25 = df['A'].median(); df['A_norm'] = round(df['A']/(a_25/0.25),2)
df['G_fraction'] = df['G']/df['Total']; g_25 = df['G'].median(); df['G_norm'] = round(df['G']/(g_25/0.25),2)
df['C_fraction'] = df['C']/df['Total']; c_25 = df['C'].median(); df['C_norm'] = round(df['C']/(c_25/0.25),2)
df['U_fraction'] = df['U']/df['Total']; u_25 = df['U'].median(); df['U_norm'] = round(df['U']/(u_25/0.25),2)

df2 = df[['NT','A_norm','G_norm','C_norm','U_norm']].copy()
df2.rename(columns={'A_norm':'A','G_norm':'G','C_norm':'C','U_norm':'U'}, inplace = True)
print("Left arm\n", df2)

# For the right arm.
for i in reversed(range(1,len(add)+1)): 
    plus_arm, minus_arm = split_arm(txt, "right", i); count_r = nt_count(i, plus_arm, "add")
    count_right.append(count_r)
for i in range(0,len(sub)):
    plus_arm, minus_arm = split_arm(txt, "right", i); count_r = nt_count(-1*i-1, minus_arm, "sub")
    count_right.append(count_r)

df3 = pd.DataFrame(count_right,columns=['NT', 'A', 'G', 'C', 'U', 'Total'])
df3['A_fraction'] = df3['A']/df3['Total']; a_25 = df3['A'].median(); df3['A_norm'] = round(df3['A']/(a_25/0.25),2)
df3['G_fraction'] = df3['G']/df3['Total']; g_25 = df3['G'].median(); df3['G_norm'] = round(df3['G']/(g_25/0.25),2)
df3['C_fraction'] = df3['C']/df3['Total']; c_25 = df3['C'].median(); df3['C_norm'] = round(df3['C']/(c_25/0.25),2)
df3['U_fraction'] = df3['U']/df3['Total']; u_25 = df3['U'].median(); df3['U_norm'] = round(df3['U']/(u_25/0.25),2)

df4 = df3[['NT','A_norm','G_norm','C_norm','U_norm']].copy()
df4.rename(columns={'A_norm':'A','G_norm':'G','C_norm':'C','U_norm':'U'}, inplace = True)
print("Right arm\n", df4)

# Combining the arms.
df_left = df[['NT','A','G','C','U','Total']].copy(); df_right = df3[['NT','A','G','C','U','Total']].copy()
df5 = df_left + df_right
df5['NT'] = df5['NT']/2
df5['A_fraction'] = df5['A']/df5['Total']; a_25 = df5['A'].median(); df5['A_norm'] = round(df5['A']/(a_25/0.25),2)
df5['G_fraction'] = df5['G']/df5['Total']; g_25 = df5['G'].median(); df5['G_norm'] = round(df5['G']/(g_25/0.25),2)
df5['C_fraction'] = df5['C']/df5['Total']; c_25 = df5['C'].median(); df5['C_norm'] = round(df5['C']/(c_25/0.25),2)
df5['U_fraction'] = df5['U']/df5['Total']; u_25 = df5['U'].median(); df5['U_norm'] = round(df5['U']/(u_25/0.25),2)

df6 = df5[['NT','A_norm','G_norm','C_norm','U_norm']].copy()
df6.rename(columns={'A_norm':'A','G_norm':'G','C_norm':'C','U_norm':'U'}, inplace = True)
print("Both arms\n", df6)

csv_outname = str(outname+"_"+RNA_region+"_"+str(len(RNA))+'.csv')
print("\n"+str(datetime.now())[:-7] + " Job completed for "+outname+". See output file "+csv_outname+" for summary.")
df6.to_csv(csv_outname, index=False)